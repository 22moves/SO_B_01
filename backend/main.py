import os
import aiohttp
import datetime
import base64
from dotenv import load_dotenv

from fastapi import FastAPI, Request, Body
from fastapi.responses import FileResponse
from fastapi.staticfiles import StaticFiles

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import sessionmaker

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥–µ–ª–∏, –¥–≤–∏–∂–æ–∫ –∏ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∏–∑ models.py
from models import Base, engine, User, Stone

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞ (—Ç–æ–∫–µ–Ω—ã)
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
AIR_QUALITY_API_KEY = os.getenv("AIR_QUALITY_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI (–¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞) –∏ Aiogram (–¥–ª—è –±–æ—Ç–∞)
app = FastAPI()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# "–ú–æ–Ω—Ç–∏—Ä—É–µ–º" –ø–∞–ø–∫—É —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –º–æ–≥ –æ—Ç–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª—ã CSS –∏ JS
app.mount("/static", StaticFiles(directory="frontend"), name="static")

# --- –õ–æ–≥–∏–∫–∞ –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö ---

async def init_models():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ."""
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

# --- –õ–æ–≥–∏–∫–∞ Telegram –ë–æ—Ç–∞ ---

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """
    –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start.
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Web App.
    """
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
    AsyncSessionLocal = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
    async with AsyncSessionLocal() as session:
        user_query = await session.execute(select(User).filter(User.telegram_id == message.from_user.id))
        user = user_query.scalar_one_or_none()
        if not user:
            new_user = User(telegram_id=message.from_user.id, username=message.from_user.username)
            session.add(new_user)
            await session.commit()

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—à–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    web_app_button = InlineKeyboardButton(
        text="üåç –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É",
        # –í–ê–ñ–ù–û: –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—é–¥–∞ –≤–∞—à URL –æ—Ç ngrok!
        web_app=WebAppInfo(url="https://YOUR_NGROK_URL")
    )
    keyboard = InlineKeyboardMarkup().add(web_app_button)
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å —Ü–∏—Ñ—Ä–æ–≤—ã–µ '–∫–∞–º–Ω–∏' –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É.",
        reply_markup=keyboard
    )

# --- –õ–æ–≥–∏–∫–∞ API –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

@app.get("/", response_class=FileResponse)
async def get_root():
    """–û—Ç–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    return FileResponse('frontend/index.html')

@app.post("/api/create_stone")
async def create_stone_api(data: dict = Body(...)):
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–º–Ω—è."""
    try:
        telegram_id = data['telegram_id']
        
        # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∏–∑ Base64 —Å—Ç—Ä–æ–∫–∏
        photo_base64 = data['photo']
        photo_path = f"user_photos/{telegram_id}_{int(datetime.datetime.now().timestamp())}.jpg"
        os.makedirs("user_photos", exist_ok=True)
        image_data = base64.b64decode(photo_base64.split(',')[1])
        with open(photo_path, "wb") as f:
            f.write(image_data)

        # 2. –ü–æ–ª—É—á–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞
        latitude = data['latitude']
        longitude = data['longitude']
        air_quality_index = await get_air_quality(latitude, longitude)
        
        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        AsyncSessionLocal = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
        async with AsyncSessionLocal() as session:
            new_stone = Stone(
                latitude=latitude,
                longitude=longitude,
                altitude=data.get('altitude'),
                photo_path=photo_path,
                air_quality_index=air_quality_index,
                creator_id=telegram_id
            )
            session.add(new_stone)
            await session.commit()
        
        return {"status": "ok", "message": "–ö–∞–º–µ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"}
    except Exception as e:
        print(f"Error creating stone: {e}") # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return {"status": "error", "message": str(e)}

async def get_air_quality(lat, lon):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞ —Å OpenWeatherMap."""
    url = f"http://api.openweathermap.org/data/2.5/air_pollution?lat={lat}&lon={lon}&appid={AIR_QUALITY_API_KEY}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                data = await resp.json()
                return data['list'][0]['main']['aqi']
    return None

# --- –ó–∞–ø—É—Å–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ ---

@app.on_event("startup")
async def on_startup():
    """–ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞, —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫."""
    await init_models()
    # –í–ê–ñ–ù–û: –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—é–¥–∞ –≤–∞—à URL –æ—Ç ngrok!
    webhook_url = f"https://YOUR_NGROK_URL/webhook"
    await bot.set_webhook(url=webhook_url)

@app.post("/webhook")
async def telegram_webhook(update: dict):
    """–ü—Ä–∏–Ω–∏–º–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram –∏ –ø–µ—Ä–µ–¥–∞–µ–º –∏—Ö –≤ aiogram."""
    telegram_update = types.Update(**update)
    await dp.process_update(telegram_update)
    return {"ok": True}

@app.on_event("shutdown")
async def on_shutdown():
    """–ü—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞, —É–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫."""
    await bot.delete_webhook()