# handlers/stone.py
import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State # <-- –í–∞–∂–Ω–æ: —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ State –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
from database.models import User, Stone # –í–∞–∂–Ω–æ: Stone –º–æ–¥–µ–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
from database.db import AsyncSessionLocal
from states.stone import StoneStates
from aiogram.types import ReplyKeyboardRemove # –î–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è API –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞
import httpx
from config import OPENWEATHER_API_KEY # –í–∞–∂–Ω–æ: —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ OPENWEATHER_API_KEY –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ config.py

router = Router()
logger = logging.getLogger(__name__)

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ ---
async def get_air_quality(latitude: float, longitude: float) -> tuple[int | None, str | None]:
    if not OPENWEATHER_API_KEY:
        logger.warning("OPENWEATHER_API_KEY not set in config.py. Skipping AQI request.")
        return None, "API –∫–ª—é—á –¥–ª—è OpenWeatherMap –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."

    api_url = f"http://api.openweathermap.org/data/2.5/air_pollution?lat={latitude}&lon={longitude}&appid={OPENWEATHER_API_KEY}"

    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(api_url)
            response.raise_for_status()

            data = response.json()
            if data and "list" in data and len(data["list"]) > 0:
                aqi_index = data["list"][0]["main"]["aqi"]
                description_map = {
                    1: "–•–æ—Ä–æ—à–µ–µ",
                    2: "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ",
                    3: "–£–º–µ—Ä–µ–Ω–Ω–æ–µ",
                    4: "–ü–ª–æ—Ö–æ–µ",
                    5: "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ"
                }
                aqi_description = description_map.get(aqi_index, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                return aqi_index, aqi_description
            else:
                logger.warning(f"No AQI data found for ({latitude}, {longitude}): {data}")
                return None, "–î–∞–Ω–Ω—ã–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    except httpx.HTTPStatusError as e:
        logger.error(f"HTTP error fetching AQI for ({latitude}, {longitude}): {e.response.status_code} - {e.response.text}")
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ (HTTP {e.response.status_code})."
    except httpx.RequestError as e:
        logger.error(f"Request error fetching AQI for ({latitude}, {longitude}): {e}")
        return None, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞."
    except Exception as e:
        logger.error(f"Unexpected error fetching AQI for ({latitude}, {longitude}): {e}")
        return None, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞."

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ---
async def display_and_confirm_stone_data(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    photo_id = user_data.get('photo_file_id', 'N/A')
    desc = user_data.get('description', 'N/A')
    lat = user_data.get('latitude', 'N/A')
    lon = user_data.get('longitude', 'N/A')
    alt = user_data.get('altitude', '–ù/–î') # –ò–∑–º–µ–Ω–∏–ª 'N/A' –Ω–∞ '–ù/–î' –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ
    aqi = user_data.get('air_quality_index', '–ù/–î')
    aq_desc = user_data.get('air_quality_description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    confirmation_text = (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"üì∏ –§–æ—Ç–æ ID: `{photo_id[:10]}...`\n" # –£–∫–æ—Ä–æ—Ç–∏–º –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è: –®–∏—Ä–æ—Ç–∞ {lat}, –î–æ–ª–≥–æ—Ç–∞ {lon}\n"
        f"‚õ∞Ô∏è –í—ã—Å–æ—Ç–∞: {alt} –º.\n"
        f"üí® –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ (AQI): {aqi} ({aq_desc})\n\n" # –ò—Å–ø—Ä–∞–≤–∏–ª aq_desc or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'
        "–í—Å–µ –≤–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    await message.answer(confirmation_text, parse_mode='Markdown')
    await state.set_state(StoneStates.confirm_stone_data)
    logger.info(f"User {message.from_user.id} awaiting confirmation.")

# --- –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è FSM StoneStates ---
@router.message(Command("add_stone"))
async def cmd_add_stone(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–∞–º–Ω—è.")
    await state.set_state(StoneStates.waiting_for_photo)
    logger.info(f"User {message.from_user.id} started adding a stone.")

@router.message(StoneStates.waiting_for_photo, F.photo)
async def process_stone_photo(message: types.Message, state: FSMContext):
    photo_file_id = message.photo[-1].file_id # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    await state.update_data(photo_file_id=photo_file_id)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–Ω—è (—á—Ç–æ —ç—Ç–æ –∑–∞ –∫–∞–º–µ–Ω—å, –≥–¥–µ –Ω–∞–π–¥–µ–Ω –∏ —Ç.–¥.).")
    await state.set_state(StoneStates.waiting_for_description)
    logger.info(f"User {message.from_user.id} uploaded photo: {photo_file_id}")

@router.message(StoneStates.waiting_for_photo, ~F.photo)
async def process_stone_photo_invalid(message: types.Message):
    await message.answer("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–∞–º–Ω—è.")
    logger.info(f"User {message.from_user.id} sent non-photo in waiting_for_photo state.")


@router.message(StoneStates.waiting_for_description, F.text)
async def process_stone_description(message: types.Message, state: FSMContext):
    description = message.text
    await state.update_data(description=description)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞–º–Ω—è (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ').")
    await state.set_state(StoneStates.waiting_for_location)
    logger.info(f"User {message.from_user.id} provided description: {description[:50]}...")

@router.message(StoneStates.waiting_for_description, ~F.text)
async def process_stone_description_invalid(message: types.Message):
    await message.answer("–≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–Ω—è.")
    logger.info(f"User {message.from_user.id} sent non-text in waiting_for_description state.")


@router.message(StoneStates.waiting_for_location, F.location)
async def process_stone_location(message: types.Message, state: FSMContext):
    latitude = message.location.latitude
    longitude = message.location.longitude
    await state.update_data(latitude=latitude, longitude=longitude)

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –∑–¥–µ—Å—å
    air_quality_index, air_quality_description = await get_air_quality(latitude, longitude)
    await state.update_data(
        air_quality_index=air_quality_index,
        air_quality_description=air_quality_description
    )
    logger.info(f"Got AQI: {air_quality_index} ({air_quality_description}) for ({latitude}, {longitude})")

    await message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã—Å–æ—Ç—É –Ω–∞–¥ —É—Ä–æ–≤–Ω–µ–º –º–æ—Ä—è? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.", reply_markup=ReplyKeyboardRemove())
    await state.set_state(StoneStates.waiting_for_altitude)
    logger.info(f"User {message.from_user.id} provided location: ({latitude}, {longitude})")


@router.message(StoneStates.waiting_for_location, ~F.location)
async def process_stone_location_invalid(message: types.Message):
    await message.answer("–≠—Ç–æ –Ω–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞–º–Ω—è.")
    logger.info(f"User {message.from_user.id} sent non-location in waiting_for_location state.")


@router.message(StoneStates.waiting_for_altitude)
async def process_stone_altitude(message: types.Message, state: FSMContext):
    altitude = None
    if message.text and message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        try:
            altitude = float(message.text)
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã—Å–æ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
            return

    await state.update_data(altitude=altitude)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö
    await display_and_confirm_stone_data(message, state)
    logger.info(f"User {message.from_user.id} provided altitude: {altitude}")

# --- –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ---
from sqlalchemy import select # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ handlers/stone.py
@router.message(StoneStates.confirm_stone_data, F.text.lower() == '–¥–∞')
async def save_stone_data(message: types.Message, state: FSMContext, user_db: User):
    data = await state.get_data()

    required_fields = ['photo_file_id', 'description', 'latitude', 'longitude']
    if not all(field in data and data[field] is not None for field in required_fields):
        await message.answer("–û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–º–Ω—è –±—ã–ª–∏ —Å–æ–±—Ä–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /add_stone.")
        logger.error(f"Missing required fields for user {user_db.id}: {data}")
        await state.clear()
        return

    new_stone = Stone(
        creator_id=user_db.id,
        username=user_db.username,
        photo_file_id=data['photo_file_id'],
        latitude=data['latitude'],
        longitude=data['longitude'],
        altitude=data.get('altitude'),
        air_quality_index=data.get('air_quality_index'),
        air_quality_description=data.get('air_quality_description'),
        description=data['description']
    )

    db_session = data.get("db_session")

    if not db_session:
        logger.error("Database session not found in state data.")
        await message.answer("–û—à–∏–±–∫–∞: –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    try:
        db_session.add(new_stone)
        await db_session.commit()
        await db_session.refresh(new_stone)
        await message.answer("–ö–∞–º–µ–Ω—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        logger.info(f"User {message.from_user.id} successfully added stone ID: {new_stone.id}")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞–º–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        logger.error(f"Error saving stone for user {message.from_user.id}: {e}")
        await db_session.rollback()
    finally:
        await state.clear()

@router.message(StoneStates.confirm_stone_data, F.text.lower() == '–Ω–µ—Ç')
async def cancel_confirm_stone_data(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–º–Ω—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    logger.info(f"User {message.from_user.id} cancelled stone data confirmation.")

@router.message(StoneStates.confirm_stone_data)
async def confirm_stone_data_invalid(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")

# --- –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /my_stones ---
@router.message(Command("my_stones"))
async def cmd_my_stones(message: types.Message, user_db: User, db_session: AsyncSessionLocal):
    if not user_db:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start, —á—Ç–æ–±—ã —è –º–æ–≥ –≤–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å.")
        return

    stmt = select(Stone).where(Stone.creator_id == user_db.id).order_by(Stone.created_at.desc())
    result = await db_session.execute(stmt)
    user_stones = result.scalars().all()

    if not user_stones:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–º–Ω—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_stone, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π!")
        return

    response_text = "<b>–í–∞—à–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–º–Ω–∏:</b>\n\n"
    for i, stone in enumerate(user_stones, 1):
        created_at_str = stone.created_at.strftime("%Y-%m-%d %H:%M") if stone.created_at else '–ù/–î'
        response_text += (
            f"<b>{i}. –ö–∞–º–µ–Ω—å ID:</b> <code>{stone.id}</code>\n"
            f"  <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {stone.description or '<i>–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è</i>'}\n"
            f"  <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {stone.latitude:.4f}, {stone.longitude:.4f}\n"
            f"  <b>–í—ã—Å–æ—Ç–∞:</b> {stone.altitude or '<i>–ù/–î</i>'} –º\n"
            f"  <b>AQI:</b> {stone.air_quality_index or '<i>–ù/–î</i>'} ({stone.air_quality_description or '<i>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</i>'})\n"
            f"  <b>–°–æ–∑–¥–∞–Ω:</b> {created_at_str}\n"
            f"  <b>–§–æ—Ç–æ ID:</b> <code>{stone.photo_file_id[:10] if stone.photo_file_id else '<i>–ù–µ—Ç —Ñ–æ—Ç–æ</i>'}...</code>\n\n"
        )
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —á–∞—Å—Ç—è–º–∏
        if len(response_text) > 3500 and i < len(user_stones):
            await message.answer(response_text, parse_mode='HTML')
            response_text = ""

    if response_text.strip():
        await message.answer(response_text, parse_mode='HTML')

    logger.info(f"User {user_db.id} requested their stones. Found {len(user_stones)} stones.")